/*
针对于pyson的格式，我这里有以下几种考虑。
第一种，保留原样，即key不添加引号，不是key添加引号
第二种，完全符合json的用法，key添加引号
第三种，符合python的dict的语法，即冒号添加引号，等号不添加引号
第四种，支持所有的表达格式
针对函数调用的用法
第一种，只保留dict用法
第二种，添加list用法
第三种，添加=号用法
*/


/*
下面做出如下更改
(1) ctx更改为self
(2) 所有的self@name 都更改为self.name
(3) 所有的import@name 都直接使用name调用,name可以是单个，例如len,list等关键词法
(4) 自注册的function，在使用之前加上 @,例如@name1.name2
(5) 只有自注册的function包含scheme
(6) 引用方法由例如 self.1.name 更改为self[1].name 符合python规范，self引用的关键词不能再进行call，scheme要对self引用的关键词来进行检测
(7) reg中增添选项禁用python固有库的调用
(8) 将pyson_name等关键词更改为pyson固有固件
*/

/*
下面对命名做出规范
(1) 对于输入的字符内容叫做pyson string
(2) 用于检测约束的内容叫做pyson scheme
(3) 产生的字典类型的结果叫做 pyson dict
(4) 产生的对象类型的结果叫做 pyson object
(5) 整个语言范式叫做pyson
(6) 补充：所有的实例统称object，对object的调用称为object call
*/

/*
下面对scheme做出规范
scheme仅针对于自注册的function
对self对象和调用以及默认的函数调用不做要求
*/

/*
下面对三种类型的表现做出规范
self是一种独立的关键词
self.object和name1.name2和自注册object等同，都统称为object
取消object name
*/

/*
增添特殊字段@empty @pyson_name等
*/

/*
现在基本的语法已经完成
checker的第一版也完成
但是我对checker的语法并不满意
主要有以下若干个方面
checker 有两种添加方式，第一种是写pyson脚本，第二种是直接写python语言
这两种方法不管哪一种都非常冗余
checker还对两种类型做检验，第一种是pyson对象，是一个dict，第二种也是pyson对象，也是一个dict
如果用 python语言写，这些方法的冗余度非常高，需要先定义checker_dict 然后OrderedDict，在OrderedDict里才能写dict脚本
如果用 pyson脚本写，那么首先第一个问题是，pyson脚本不支持单个脚本的定义，因为单个脚本也是一个对象，pyson不支持解析单个对象
第二个问题是，这种写法的冗余度也非常高，每次都需要定义额外的checker.dict不容易书写。
最后，对于定义一个函数，我想并没有必要非要写复杂的pyson文件。
我希望checker的的定义方法简单又明了
*/

/*
我这里给出python端的解决策略
我的大脑有些过热
这里基本策略已经敲定，剩下的是如何命名的问题
这里需要定义一个名称DictChecker
*/

/*
另外需要额外给pyson scheme添加接口
如何方便的添加接口也是个复杂的问题
首先对于object，可以setCheckerForObject
实际上每次让用户来指定checker并不科学
transform的使用比较科学
resgist_checker()
get_checker("")
*/

/*
现在的一个小问题是如何应对pyson对象本身的checker
第一种方法，可以通过dict checker生成
第二种方法，可以通过pyson定义，然而pyson定义不支持单个object
pyson设计的原则是，pyson的语法本身尽可能独立，checker使用pyson表示固然好，不使用也可以
在接口方面，只保留最基本的接口即可，不再提供和多组文件读取相关的接口
另外需要提供一个内置的注册函数列表，以将已注册函数表示出来。
*/

/*统一不再提供文件读取支持*/

/*
还有一个小问题是元素的中间表示是一个ordered data，然而在转义以后，其结果是一个unordered data，然而在转义以后，其结果是一个unordered
这样的话，function call的list形式的调用可能会发生错误。
*/

/*
先假设我所希望的景象
DictChecker用于在pyson文件中定义
另外还有一个用户的dictChecker用于在文件中add_key

最后还有一个paramsDictChecker用于无需变量名，添加自由约束
另外我不希望有类似于Parse和重复传递参数的操作
但是如果没有就需要额外的接口来解析

DictChecker设计完，我就做测试
tips功能可以以后再添加，这一块比较复杂

现在再明确一下目标，我的主要目标是要做一个字符串传参的范式，对标的主要是json，不应该受到pyparser等的影响，在参数提示支持上不应该受到pyparser的影响

现在线头有点多需要重新理顺一下

首先pyson是本体，仅提供函数注册功能无任何约束
然后是checker，提供对pyson语法的检验，检验可以使用pyson源语来写，也可以使用函数来编写，编写提供了特殊的接口，有点类似于pyparser
但不同于pyparser，pyson不提供任何输入提示，输入仅应当符合pyson checker所定义的格式，这一点和xml scheme非常相像。
但是pyson会提供checker提示api，但是这个不属于pyson的一部分。
json base和pyparser base各有其优势。json base靠一个样例文件提供提示，pyparser base靠最简单的自动提示。
另外json base的升级版是dict base，但是dict base必须要创建实例对象，函数书写也相对复杂，也不能在python的运行时来当做参数传递。
pyson base解决一个痛点问题，面向对象的超参数表示，这一点任何base都不能比拟，另外对象的实例化时间完全由用户决定
缺点是：
与dict base相比需要注册函数，但是会提供更加清晰的表示方法。
与json base相比语法相对复杂，但是这些都是必要的
与pyparser base相比，没有语法提示，但有config文件示例，但是config文件不好编写，需要有一定的提示才能进行。
优点也很明确，如果不考虑语法限制，pyson吊打pyparser base，考虑语法限制，pyson比pyparser在处理复杂参数上也清晰地多。

所以pyson的优点很明显，在面向跨网络config文件传输上，xml和json完全不是对手，但是缺点是本语言仅限制于python，暂时没有扩展其他语言的打算。
暂时希望服务的应用就是使用python编写的复杂的控制平台，例如深度学习自动训练平台。
在面向深度学习模型配置上，pyson和dict base方法各有优劣，pyson更加具有条理性且提供了checker支持，另外不会立即实例化对象。dict base方法包含天然的语法提示
整体来讲pyson仍然具有完全不可替代的作用
pyson和pyparser方法也各有千秋，pyson可以设置极端复杂的和高层次的配置，pyparser则只能设置最简单的配置，同时还有复杂的if else语句的解析成本。
缺点是pyparser天然带有语法提示，而pyson天然不具备语法提示，只能依赖于之前config文件的提示。在这里我对这个语言进行一个补全条例。
*/

/*
明确了这些，下面规划一系列工作。
首先由于测试的极端不适，必须增添两个userChecker接口
然后需要对checker完成测试，然后尽快发布到github上，使用pip发布，并编写document
后期有以下工作可以做
1 改善pyson object的访问接口，整合dict和object访问两种方式
2 考虑将注册checker机制，并和transform一起修改
3 增添tips级联功能。
4 在carpo平台上，整合第一个用pyson编写的分类项目
5 在carpo平台上提供网页可视化支持。
6 添加打印当前注册函数的接口
*/

/*对DictChecker作出更改，首先抽象出BaseDictChecker用作，DictChecker和ParamsChecker的基类
DictChecker支持OrderedDict和UnOrderedDict, ParamsChecker支持List以及需要func
*/

/*实践中还是pysonfile比较香
这里面如果可以直接传递func object会更香，但是直接传递function，有一定的危险性，想对的路径读取，不能保证，可以读取到函数
另外解决了一个调用内置函数的问题，可以使用globals()来进行调用和查找
另外我测试了importlib的调用，importlib的调用完全同步于当前的执行文件，所以具有一定的危险性

最终解决方案是，简化注册函数，同时不使用非包的读取的方式，并添加globals() build in function的支持
*/

/*ParamsChecker 有两种实现方案，第一种是需要使用func来构造，第二种不需要function来构造
第一种的好处是，构造出来的checker可以直接进行regist，同时更加符合逻辑，第二种的好处是，在构造params checker的时候无需再将函数名进行传递。
*/

/*暂不提供变长checker支持*/

/*
有一个小问题
params的设定真的需要OrderedDict吗？
是否有更加优秀的Params的checker设计
理顺一下现有的设计，
如果params传入了dict，那么就直接当作参数解析
如果有简单的setParamsChecker接口，那么ParamsChecker也可以去除更改。
另外DictChecker也可以根据所在的func排序。
如果params传入了list，那么list先根据OrderedDict的顺序转换成OrderedDict再进行解析
需要考虑一个问题，如果用户定义的Dict不符合顺序结构，如果Unlimit为False，且没有默认的参数，就报错
如果用户定义的Dict不符合顺序结构，同时Unlimit为True，
*/

/*Object Checker如果使用正则表达式的话，语法匹配规则过于复杂，这里我打算使用
相对简单的语法匹配规则，前缀语法匹配规则，只要begin with即可
*/

/*
下面编写一个简单测试
*/

{
    prefix:{
        model:@nn.sequential([@nn.conv2d(3,16,3,1),@nn.conv2d(32,64,3,1),@nn.conv2d(64,128,3,1)]),
        lr:0.1,
        dataset:{
            name: "mnist",
            batch_size:32
        }
    },
    model:self.prefix.model,
    lr:self,
    dataset:self.prefix.dataset
}

/*
下面涉及一些简单改进
思考OrderedDict是否真的需要
如果只是转译，不考虑checker，那么可以直接用dict
如果是dictChecker可以直接用dict
如果是参数checker，由于在注册中加入了排序机制，也可以直接用dict
综上，所有的内容都可以用dict表示
*/

/*
考虑一些改进的点
1 检查content定位机制
2 检查更加复杂的checker和包含self引用
3 把pyson_object更改一下，提供更加舒服的访问机制 (完成)
4 提供更好的报错机制
5 为checker提供级联的print机制 (完成)
6 filter机制 (完成)
*/

/*
先从简单的开始，更改pyson_object机制
然后为checker增添级联print
*/

/*
添加默认的几个关键词类 (完成)
*/

/*
优化代码结构 (与content一致，待定，非必须)
*/

/*优化content，value不再是content的一个元素，而是content本身
重点优化的有list,dict和object，
int str bool float None等如果可以优化最好
*/

/*优化转换流程，先将内容翻译成content，然后transform可以指定翻译内容
优化checker，checker的dict可以直接通过[]访问子checker
*/

/*考虑transfrom的参数传递
checker可以直接使用string字符串 obj.obj.1来进行引用
*/

/*现在有两种方式，一种是pyson可以预加载，然后执行子模块，
另外一种则是，pyson不允许预加载，直接全部编译并执行*/

/*在这里我选择全部执行的方式，没有理由json可以整体执行，pyson却只能分步，分块执行*/

/*content 本身其实并不影响模型的使用
content 只在中间过程出现，在末尾过程不出现*/

/*
现在有一个非常复杂的问题
执行的代码可以在任何时间被实例化
json等object notation，由于其数据轻亮，这些数据哪怕全部被实例化也可以被接受
然而在pyson中，如果一个pyson对应了多种情况，那么其他情况的对象也要被被迫实例化。
在这个过程中，会有大量的无效object。然而这些都是必要的，删除任何一个部分都会破坏实例的有效性，除非加入if else 语句
在这里我不打算增添任何其他的举动来增加语言的复杂性，可能唯一需要增添的是group设定。
*/

/*现在的pyson已经完全可以使用，
剩下的工作主要是完善测试，以及增加一些设定来使得pyson更加易用。
是否添加group？ 添加无论如何group都是有用的，哪怕仅仅是单个文件的解析
*/

/*梳理一下报错定位*/

/*checker增添__str__函数*/

/*思考一下怎么嫁接自动化页面渲染*/
/*我觉得仿佛可以从checker __str__ 入手*/
/*提供更好的报错机制依然是一个重头戏,首先是报错不宜冗杂，然后是报错必定位,尽量避免无法定位的错误*/

/* 想对于group，更好的设计是filter，在pyson中，filter选中的元素被编译保留，filter未选中的元素被舍弃*/
/* perfect 的解决方案 */
/* 在这种情况下，filter对应的checker也需要被剪裁，来适应被剪裁的pyson object的需要 */
/* 另外一个则是对list元素的处理，被剪裁的内容中包含了list，list经常会不固定长度，那么剪裁起来就相对有困难
主要的问题是用户可能只有在知道list长度的情况下才能对pyson object进行合理的剪裁，
然而实际上用户无法在转译pyson_object之前知道list的长度。*/

0
/*
剩余代办项
1）检查content定位机制，提供更准确的定位（已完成）
2）提供更好的报错机制，简单准确(完成)
3）优化整体的代码结构(非必须)
4）做更广泛的功能测试
5）分析时间瓶颈（已经分析清楚，生成树的过程比较耗时）
*/

/* 对于content定位机制，需要先明确一下从什么地方开始梳理
1）首先是pyson语法分析库，这个地方是定位的起点(Pass)
2）然后是transform报错的地方，这个地方输出content的位置(Pass)
3）最后一个是checker，checker是checking大户(Pass)
检查过后感觉似乎没有什么地方可以完善，虽然没空间可以优化，但是感觉机制还不够强大，不过可以先放一放，暂且够用*/

/* 目前报错机制主要是输出过于繁琐 */
/* 在原理上部分报错机制无法进行定位*/

/* 这里有一定的问题，首先定位不准，第二输出类型时输出为<class str> 不合理*/
/* 先解决定位问题(Pass)*/

/*经过调查采用return报错和raise报错结合的方式更有利于结果的展示*/
/*在这里我打算在from_file的内部即handle住输出内容，然后在最后再raise error*/

/*初步的策略是，函数承接信息，并handle指定的error，然后将error包装并raise出去*/
/*下面分若干步
1) 将error从原有的代码结构中提取出来，放置到代码的外部
2) 更改from_file 和from_string 将信息进行封装，分为4类抛出
4) 修改from_file 和from_string 的代码结构
*/

/*
Error存在一些问题，一方面我不希望输出太多的Error traceback，另外一方面
*/

/*考虑一个基本问题，如果一个对象不希望被实例化怎么办
在这里对不希望实例化的对象使用object checker的非instance 版本进行约束*/

//明天跑通程序，
//pyson做更多测试，并考虑antlr速度优化
//准备发布github

//做self级的测试

//修复transform中的bug

/*我想 关于self的策略需要被修改，目前的策略不能满足要求
1）self被单独分立出来作为一个特殊的类型
2）self被被拿出来，然后根据self索引之前的元素获取node和转义后的value
3）如果node不是一个self类型，例如dict,那么就先递归check before再递归check after
*/

/*有一个需要区分的点是self是否允许function call，
如果允许首先需要确认当前检测的object是否已经被实例化
如果没有被实例化，那么需要再调用检测*/

/*self是否有function call的意义呢？
如果可以，self是否可以被反复使用？ 如果self传递到function中，无意中self中的内容发生了改变
比如self不再是原来的self，这种情况是否应该被考虑？
如果self可以被function call 在生成器这种情况中，这种操作非常不安全，没有保障
有没有self 做function call 而不做function call不能做的事情。
想不到，我暂且认为self做function call没有任何意义*/

/*考虑从根部分立出self语法，没有这个折腾的必要*/

/*考虑在transform阶段分立出self*/

/*考虑如何设计self的reference的location，location有两个
一个是调用self的location，一个是被引用的原位置的location
这些内容如果要做error report，包含有两个位置，但是checker只能report一个位置，即原位置。*/

/*新的checker的代码已经完成*/

/*功能性测试self的语法已经测试完成 */








