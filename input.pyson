/*
针对于pyson的格式，我这里有以下几种考虑。
第一种，保留原样，即key不添加引号，不是key添加引号
第二种，完全符合json的用法，key添加引号
第三种，符合python的dict的语法，即冒号添加引号，等号不添加引号
第四种，支持所有的表达格式
针对函数调用的用法
第一种，只保留dict用法
第二种，添加list用法
第三种，添加=号用法
(finish)
*/


/*
下面做出如下更改
(1) ctx更改为self
(2) 所有的self@name 都更改为self.name
(3) 所有的import@name 都直接使用name调用,name可以是单个，例如len,list等关键词法
(4) 自注册的function，在使用之前加上 @,例如@name1.name2
(5) 只有自注册的function包含scheme
(6) 引用方法由例如 self.1.name 更改为self[1].name 符合python规范，self引用的关键词不能再进行call，scheme要对self引用的关键词来进行检测
(7) reg中增添选项禁用python固有库的调用
(8) 将pyson_name等关键词更改为pyson固有固件
(finish)
*/

/*
下面对命名做出规范
(1) 对于输入的字符内容叫做pyson string
(2) 用于检测约束的内容叫做pyson scheme
(3) 产生的字典类型的结果叫做 pyson dict
(4) 产生的对象类型的结果叫做 pyson object
(5) 整个语言范式叫做pyson
(6) 补充：所有的实例统称object，对object的调用称为object call
(undo)
*/

/*
下面对scheme做出规范
scheme仅针对于自注册的function
对self对象和调用以及默认的函数调用不做要求
(finish)
*/

/*
下面对三种类型的表现做出规范
self是一种独立的关键词
self.object和name1.name2和自注册object等同，都统称为object
取消object name
(finish)
*/

/*
增添特殊字段@empty @pyson_name等
(finish)
*/

/*
现在基本的语法已经完成
checker的第一版也完成
但是我对checker的语法并不满意
主要有以下若干个方面
checker 有两种添加方式，第一种是写pyson脚本，第二种是直接写python语言
这两种方法不管哪一种都非常冗余
checker还对两种类型做检验，第一种是pyson对象，是一个dict，第二种也是pyson对象，也是一个dict
如果用 python语言写，这些方法的冗余度非常高，需要先定义checker_dict 然后OrderedDict，在OrderedDict里才能写dict脚本
如果用 pyson脚本写，那么首先第一个问题是，pyson脚本不支持单个脚本的定义，因为单个脚本也是一个对象，pyson不支持解析单个对象
第二个问题是，这种写法的冗余度也非常高，每次都需要定义额外的checker.dict不容易书写。
最后，对于定义一个函数，我想并没有必要非要写复杂的pyson文件。
我希望checker的的定义方法简单又明了
(finish)
*/

/*
我这里给出python端的解决策略
我的大脑有些过热
这里基本策略已经敲定，剩下的是如何命名的问题
这里需要定义一个名称DictChecker
(finish)
*/

/*
另外需要额外给pyson scheme添加接口
如何方便的添加接口也是个复杂的问题
首先对于object，可以setCheckerForObject
实际上每次让用户来指定checker并不科学
transform的使用比较科学
resgist_checker()
get_checker("")
(finish)
*/

/*
现在的一个小问题是如何应对pyson对象本身的checker
第一种方法，可以通过dict checker生成
第二种方法，可以通过pyson定义，然而pyson定义不支持单个object
pyson设计的原则是，pyson的语法本身尽可能独立，checker使用pyson表示固然好，不使用也可以
在接口方面，只保留最基本的接口即可，不再提供和多组文件读取相关的接口
另外需要提供一个内置的注册函数列表，以将已注册函数表示出来。
(finish)
*/

/*统一不再提供文件读取支持*/

/*
还有一个小问题是元素的中间表示是一个ordered data，然而在转义以后，其结果是一个unordered data，然而在转义以后，其结果是一个unordered
这样的话，function call的list形式的调用可能会发生错误。
(finish another scheme)
*/

/*
先假设我所希望的景象
DictChecker用于在pyson文件中定义
另外还有一个用户的dictChecker用于在文件中add_key

最后还有一个paramsDictChecker用于无需变量名，添加自由约束
另外我不希望有类似于Parse和重复传递参数的操作
但是如果没有就需要额外的接口来解析

DictChecker设计完，我就做测试
tips功能可以以后再添加，这一块比较复杂(replace wth repr)

现在再明确一下目标，我的主要目标是要做一个字符串传参的范式，对标的主要是json，不应该受到pyparser等的影响，在参数提示支持上不应该受到pyparser的影响 (不受到pyperser影响)

现在线头有点多需要重新理顺一下

首先pyson是本体，仅提供函数注册功能无任何约束
然后是checker，提供对pyson语法的检验，检验可以使用pyson源语来写，也可以使用函数来编写，编写提供了特殊的接口，有点类似于pyparser
但不同于pyparser，pyson不提供任何输入提示，输入仅应当符合pyson checker所定义的格式，这一点和xml scheme非常相像。
但是pyson会提供checker提示api，但是这个不属于pyson的一部分。
json base和pyparser base各有其优势。json base靠一个样例文件提供提示，pyparser base靠最简单的自动提示。
另外json base的升级版是dict base，但是dict base必须要创建实例对象，函数书写也相对复杂，也不能在python的运行时来当做参数传递。
pyson base解决一个痛点问题，面向对象的超参数表示，这一点任何base都不能比拟，另外对象的实例化时间完全由用户决定
缺点是：
与dict base相比需要注册函数，但是会提供更加清晰的表示方法。
与json base相比语法相对复杂，但是这些都是必要的
与pyparser base相比，没有语法提示，但有config文件示例，但是config文件不好编写，需要有一定的提示才能进行。
优点也很明确，如果不考虑语法限制，pyson吊打pyparser base，考虑语法限制，pyson比pyparser在处理复杂参数上也清晰地多。

所以pyson的优点很明显，在面向跨网络config文件传输上，xml和json完全不是对手，但是缺点是本语言仅限制于python，暂时没有扩展其他语言的打算。
暂时希望服务的应用就是使用python编写的复杂的控制平台，例如深度学习自动训练平台。
在面向深度学习模型配置上，pyson和dict base方法各有优劣，pyson更加具有条理性且提供了checker支持，另外不会立即实例化对象。dict base方法包含天然的语法提示
整体来讲pyson仍然具有完全不可替代的作用
pyson和pyparser方法也各有千秋，pyson可以设置极端复杂的和高层次的配置，pyparser则只能设置最简单的配置，同时还有复杂的if else语句的解析成本。
缺点是pyparser天然带有语法提示，而pyson天然不具备语法提示，只能依赖于之前config文件的提示。在这里我对这个语言进行一个补全条例。

pyson并不面向于服务器配置领域,仅面向于复杂的配置设置和远程对象调用. (finish)
*/

/*
明确了这些，下面规划一系列工作。
首先由于测试的极端不适，必须增添两个userChecker接口
然后需要对checker完成测试，然后尽快发布到github上，使用pip发布，并编写document
后期有以下工作可以做
1 改善pyson object的访问接口，整合dict和object访问两种方式 (finish)
2 考虑将注册checker机制，并和transform一起修改 (finish)
3 增添tips级联功能。(replace with repr)
4 在carpo平台上，整合第一个用pyson编写的分类项目 (undo)
5 在carpo平台上提供网页可视化支持。 (undo)
6 添加打印当前注册函数的接口 (finish)

*/

/*对DictChecker作出更改，首先抽象出BaseDictChecker用作，DictChecker和ParamsChecker的基类
DictChecker支持OrderedDict和UnOrderedDict, ParamsChecker支持List以及需要func
*/

/*实践中还是pysonfile比较香
这里面如果可以直接传递func object会更香，但是直接传递function，有一定的危险性，想对的路径读取，不能保证，可以读取到函数
另外解决了一个调用内置函数的问题，可以使用globals()来进行调用和查找
另外我测试了importlib的调用，importlib的调用完全同步于当前的执行文件，所以具有一定的危险性

最终解决方案是，简化注册函数，同时不使用非包的读取的方式，并添加globals() build in function的支持
(finish,实际上在python文件中写dict更香)
*/

/*ParamsChecker 有两种实现方案，第一种是需要使用func来构造，第二种不需要function来构造
第一种的好处是，构造出来的checker可以直接进行regist，同时更加符合逻辑，第二种的好处是，在构造params checker的时候无需再将函数名进行传递。
(finish)
*/

/*暂不提供变长checker支持*/

/*
有一个小问题
params的设定真的需要OrderedDict吗？
是否有更加优秀的Params的checker设计
理顺一下现有的设计，
如果params传入了dict，那么就直接当作参数解析
如果有简单的setParamsChecker接口，那么ParamsChecker也可以去除更改。
另外DictChecker也可以根据所在的func排序。
如果params传入了list，那么list先根据OrderedDict的顺序转换成OrderedDict再进行解析
需要考虑一个问题，如果用户定义的Dict不符合顺序结构，如果Unlimit为False，且没有默认的参数，就报错
如果用户定义的Dict不符合顺序结构，同时Unlimit为True，
(finish)
*/

/*Object Checker如果使用正则表达式的话，语法匹配规则过于复杂，这里我打算使用
相对简单的语法匹配规则，前缀语法匹配规则，只要begin with即可
(finish)
*/

/*
下面编写一个简单测试
*/

{
   
    prefix:{
        model:@nn.sequential([@nn.conv2d(3,16,3,1),@nn.conv2d(32,64,3,1),@nn.conv2d(64,128,3,1)]),
        lr:0.1,
        dataset:{
            name: "mnist",
            batch_size:@nn.conv2d(3,16,3,1)
        }
    },
     lr:0.1,
    model:self.prefix.model,
    dataset:self.prefix.dataset
}

/*
下面涉及一些简单改进
思考OrderedDict是否真的需要
如果只是转译，不考虑checker，那么可以直接用dict
如果是dictChecker可以直接用dict
如果是参数checker，由于在注册中加入了排序机制，也可以直接用dict
综上，所有的内容都可以用dict表示
(finish)(error here)
*/

/*
考虑一些改进的点
1 检查content定位机制(finish)
2 检查更加复杂的checker和包含self引用(finish)
3 把pyson_object更改一下，提供更加舒服的访问机制 (完成)
4 提供更好的报错机制(finish)
5 为checker提供级联的print机制 (完成)
6 filter机制 (完成)
*/

/*
先从简单的开始，更改pyson_object机制
然后为checker增添级联print
(finish)
*/

/*
添加默认的几个关键词类 (完成)
*/

/*
优化代码结构 (与content一致，待定，非必须) (undo)
*/

/*优化content，value不再是content的一个元素，而是content本身
重点优化的有list,dict和object，
int str bool float None等如果可以优化最好
(drop)
*/

/*优化转换流程，先将内容翻译成content，然后transform可以指定翻译内容
优化checker，checker的dict可以直接通过[]访问子checker (drop)
*/

/*考虑transfrom的参数传递
checker可以直接使用string字符串 obj.obj.1来进行引用
(drop)
*/

/*现在有两种方式，一种是pyson可以预加载，然后执行子模块，
另外一种则是，pyson不允许预加载，直接全部编译并执行
(replace with filter)
*/

/*在这里我选择全部执行的方式，没有理由json可以整体执行，pyson却只能分步，分块执行

(replace with filter)*/

/*content 本身其实并不影响模型的使用
content 只在中间过程出现，在末尾过程不出现
(checker structure concern)
*/

/*
现在有一个非常复杂的问题
执行的代码可以在任何时间被实例化
json等object notation，由于其数据轻亮，这些数据哪怕全部被实例化也可以被接受
然而在pyson中，如果一个pyson对应了多种情况，那么其他情况的对象也要被被迫实例化。
在这个过程中，会有大量的无效object。然而这些都是必要的，删除任何一个部分都会破坏实例的有效性，除非加入if else 语句
在这里我不打算增添任何其他的举动来增加语言的复杂性，可能唯一需要增添的是group设定。
(replace with filter)
*/

/*现在的pyson已经完全可以使用，
剩下的工作主要是完善测试，以及增加一些设定来使得pyson更加易用。
是否添加group？ 添加无论如何group都是有用的，哪怕仅仅是单个文件的解析
(replace with filter)
*/

/*梳理一下报错定位 (finish)*/

/*checker增添__str__函数(finish)*/

/*思考一下怎么嫁接自动化页面渲染*/
/*我觉得仿佛可以从checker __str__ 入手*/
/*提供更好的报错机制依然是一个重头戏,首先是报错不宜冗杂，然后是报错必定位,尽量避免无法定位的错误*/
/*(The origin design)*/

/* 想对于group，更好的设计是filter，在pyson中，filter选中的元素被编译保留，filter未选中的元素被舍弃*/
/* perfect 的解决方案 */
/* 在这种情况下，filter对应的checker也需要被剪裁，来适应被剪裁的pyson object的需要 */
/* 另外一个则是对list元素的处理，被剪裁的内容中包含了list，list经常会不固定长度，那么剪裁起来就相对有困难
主要的问题是用户可能只有在知道list长度的情况下才能对pyson object进行合理的剪裁，
然而实际上用户无法在转译pyson_object之前知道list的长度。
(finish)*/

/*
剩余代办项
1）检查content定位机制，提供更准确的定位（已完成）
2）提供更好的报错机制，简单准确(完成)
3）优化整体的代码结构(非必须)
4）做更广泛的功能测试(undo)
5）分析时间瓶颈（已经分析清楚，生成树的过程比较耗时）
*/

/* 对于content定位机制，需要先明确一下从什么地方开始梳理
1）首先是pyson语法分析库，这个地方是定位的起点(Pass)
2）然后是transform报错的地方，这个地方输出content的位置(Pass)
3）最后一个是checker，checker是check,首先是报错不宜冗杂，然后是报错必定位,尽量避免无法定位的错误*/
/*(The origin design)*/

/* 想对于group，更好的设计是filter，在pyson中，filter选中的元素被编译保留，filter未选中的元素被舍弃*/
/* perfect 的解决方案 */
/* 在这种情况下，filter对应的checker也需要被剪裁，来适应被剪裁的pyson object的需要 */
/* 另外一个则是对list元素的处理，被剪裁的内容中包含了list，list经常会不固定长度，那么剪裁起来就相对有困难
主要的问题是用户可能只有在知道list长度的情况下才能对pyson object进行合理的剪裁，
然而实际上用户无法在转译pyson_object之前知道list的长度。
(finish)*/

/*
剩余代办项
1）检查content定位机制，提供更准确的定位（已完成）
2）提供更好的报错机制，简单准确(完成)
3）优化整体的代码结构(非必须)
4）做更广泛的功能测试(undo)
5）分析时间瓶颈（已经分析清楚，生成树的过程比较耗时）
*/

/* 对于content定位机制，需要先明确一下从什么地方开始梳理
1）首先是pyson语法分析库，这个地方是定位的起点(Pass)
2）然后是transform报错的地方，这个地方输出content的位置(Pass)
3）最后一个是checker，checker是checking大户(Pass)
检查过后感觉似乎没有什么地方可以完善，虽然没空间可以优化，但是感觉机制还不够强大，不过可以先放一放，暂且够用*/

/* 目前报错机制主要是输出过于繁琐 */
/* 在原理上部分报错机制无法进行定位*/

/* 这里有一定的问题，首先定位不准，第二输出类型时输出为<class str> 不合理*/
/* 先解决定位问题(Pass)*/

/*经过调查采用return报错和raise报错结合的方式更有利于结果的展示*/
/*在这里我打算在from_file的内部即handle住输出内容，然后在最后再raise error*/

/*初步的策略是，函数承接信息，并handle指定的error，然后将error包装并raise出去*/
/*下面分若干步
1) 将error从原有的代码结构中提取出来，放置到代码的外部
2) 更改from_file 和from_string 将信息进行封装，分为4类抛出
4) 修改from_file 和from_string 的代码结构
*/

/*
Error存在一些问题，一方面我不希望输出太多的Error traceback，另外一方面
*/

/*考虑一个基本问题，如果一个对象不希望被实例化怎么办
在这里对不希望实例化的对象使用object checker的非instance 版本进行约束*/

//明天跑通程序，
//pyson做更多测试，并考虑antlr速度优化
//准备发布github

//做self级的测试

//修复transform中的bug

/*我想 关于self的策略需要被修改，目前的策略不能满足要求
1）self被单独分立出来作为一个特殊的类型
2）self被被拿出来，然后根据self索引之前的元素获取node和转义后的value
3）如果node不是一个self类型，例如dict,那么就先递归check before再递归check after
*/

/*有一个需要区分的点是self是否允许function call，
如果允许首先需要确认当前检测的object是否已经被实例化
如果没有被实例化，那么需要再调用检测*/

/*self是否有function call的意义呢？
如果可以，self是否可以被反复使用？ 如果self传递到function中，无意中self中的内容发生了改变
比如self不再是原来的self，这种情况是否应该被考虑？
如果self可以被function call 在生成器这种情况中，这种操作非常不安全，没有保障
有没有self 做function call 而不做function call不能做的事情。
想不到，我暂且认为self做function call没有任何意义*/

/*考虑从根部分立出self语法，没有这个折腾的必要*/

/*考虑在transform阶段分立出self*/

/*考虑如何设计self的reference的location，location有两个
一个是调用self的location，一个是被引用的原位置的location
这些内容如果要做error report，包含有两个位置，但是checker只能report一个位置，即原位置。*/

/*新的checker的代码已经完成*/

/*功能性测试self的语法已经测试完成 */

/*下一步做初步的文件打包*/
/*创建setup文件，并发布到pypi上*/
/*统一命名规则*/

/*修复一个修改性问题*/
/*目前有若干个方案来实现这个问题
方案一：所有传入function的self参数可以任意读写，其修改都会传递到原有的代码中去，包括dict和list结构
方案二：所有的terminal可以任意读写，但是dict和list结构不能发生更改
方案三：terminal和dict和list结构均不可修改
对于方案一：会存在结构上和数据上的checker不一致问题，优点是代码的灵活性极强，但是更改超出了原有的代码体系，content和data会表现出完全的不一致性，
dict和list也会表现出完全的不一致性。
例如check_before是一个list但是checker_after却是一个dict，这一点不应该被允许，如果checker是一个None，或者标定为unlimit则完全没有问题。
这会让用户感到混淆，比如checker_before检测到了string，但是实际的期望是一个int，那么这不应该被允许。
checker明明是一个list checker，经过更改以后也是一个list，但是之前是一个dict，那么经过check before，则会出现问题。
check_before 和checker_after应该以checker_after为准，但是如果list中出现了object，那么cehcker_before必须被调用，但是由于这个list中的元素和之前的元素不一致，那么就会出现失衡.
另外如果object checker可以适应content checker，那么新的object哪怕不是真正的content checker实例，实例也依然可以骗过object checker。
所以从机制上来讲，这种方法无法成功。
方案二：
dict和list结构不能发生更改，数据可以发生更改，在这种情况下，也同样会出现之前的问题
方案三：
dict和list结构不能发生更改，数据类型不能发生更改，但数据值可以发生更改，这种方式可以解决问题，但是在可更改环境中，同样面临了显示数据不一致的问题
方案四：
dict和list结构不能发生更改，数据类型和值也不能更改。但是在完全transform过后，这些均可以更改。

现在目标写一个只读的dict和list

突然有个问题，如果在 父未成形时，子节点引入父节点，会怎么样？会造成无限循环递归*/

/*明确今日任务
1)给基本类型的checker添加非object对象限制(finish)
2)重新考虑checker的设计，尤其是dict和list(waiting)
3)考虑子节点引入父节点问题，以及其循环调用问题,这种情况应该被禁止(finish)
4)编写只读的dict和list结构(finish)
*/ 

/*有一个小bug一直没有解决掉，就是在语法的后面添加任意文字，语法依然可以被解析 我想需要修复一下这个bug*/

/*The parent could not accessed by the child， 所以我们不用担心子节点会访问到父亲变元
所以当前的目标就是setting一个只读字典和list*/
/*我忘记了一个非常重要的项 self 只能在*/
/* 还有一种情况是:如果checker dict包含了,defualt的选项,那么就会写dict,这样被补全的dict会报错*/
/*或许深拷贝更符合当前的情况*/

/* 深拷贝不符合要求,最好还是使用报错机制
1) 如果是非函数调用的self引用,那么无需设置为只读
2) 如果是函数调用的self引用那么级联设置为只读 */

/* 只读的代码里面可能会包含self自引用,即id为root,
在这种情况下,当遇到self时,需要将当前位置的内容替换成root_dict
只读dict和只读list如何初始化?*/

/*考虑下convert read only应该怎么实现?*/

/*考虑self的ReadOnly如何设计*/

/*要不要取消掉self，取消吧*/
/*主观上我希望self被保留*/
/*思考一下应该如何设计这个主题*/
/*如果dict不是read only 那么有一个ctx=None
如果ctx不为None，则代表属于根的self已经存在，在这种情况下就直接对self进行赋值
然后再级联disable 所有的dict和list*/

/*已完成readOnly问题*/

/*考虑dict的情况*/

/*
考虑checker的情况，现在checker可以放心修改原有的数据文件了
如果出现了冲突性的checker？那么用户应带对这个问题负责任*/

/*明日计划
1）考虑从用户便利角度重新设计checker部分，尽管在使用上已经非常方便
但是在可扩展性和语义的理解上也应当提供方便,从用户角度看待checker的可扩展性
2）做更多的更复杂的测试，增添test文件夹，对大规模checker做测试
3）编写setup
*/

/*在定义函数中出现的error应该被定义为 Runtime

/*工作梳理代办项
1) 统一pyson概念(finish)
2) 修改将dict转换为DictChecker以及Checker检查从transform代码里移除,移至regist(finish)
3) 重新考虑checker设计是否合理,优化用户扩展性体验(finish)
4) 测试
5) 性能测试与考虑优化
5) 发布
6) 编写carpo平台示例
*/

/* 首先统一pyson中的几个概念
当前的字符串叫pyson string
被解析后的对象叫做pyson object
内部被调用的注册函数叫做 regist_object 或者 python_object
检查pyson string的传入对象叫checker
未被解析的当前内容叫content,未被解析的pyson整体叫做root_content
被解析的当前内容叫value,被解析的pyson整体叫做root_value
*/

/*下面将dict转换为DictChecker以及Checker检查从transform代码里移除,移植到regist*/

/*有一个小问题,由于Checker Dict中的 dict是通过参数传递的方式传入到DictChecker中的,所以checker dict天然具有read only的属性*/
//然而我们要求,所有的参数都是readOnly的
//所以呢? //Readonly合理吗? //答, 不合理
//那么更好的方式是DeepCopy
/*
pyson deep copy同样有root_id的问题
*/

/*检查一下输出问题,从道理上来讲应该还有一层的exception可以handle这个问题*/

/*下一个议程,统一pyson中的概念*/
/*一个一个改名字,没有什么窍门*/

/*我觉得 content和root_content以及value和root_value不能反映这两个量的含义*/

/*换一换名字吧，叫什么呢？ 
content and root_content transformed_data transfromed_root*/
/* node output */

/*check_before和checker_after的双设计大致合理*/
/*terminal的设计大致合理*/
/*checker dict和checker list的设计合理吗？*/

/*这两项内容和当前的transform高度耦合*/

/*首先pyson_dict和dict中的内容是否一致*/
/*例如设置了unlimit为True会怎么样?*/
/*所以现在的问题是pyson_dict耦合性过强，两者的分工并不明确*/
/*从本质上来transform dict应当仅获取子checker，并将子checker分发给子例程
list checker 则检测当前元素的check_before并将元素返回给transform函数*/

/*明日代办项
1）抽象checker设计(finish)
2）简化transform代码(finish)
3）编写测试例程
4）编写setup，打包成pip
5）编写document
6）编写carpo程序示例*/

/*聚焦一下当前的checker,所有的方法需要继承DictChecker或者ParamsChecker
ParamsChecker非常特殊，只有在根部的时候可以被使用，ParamsChecker只有在根部的时候才可以被使用
理论上来讲ParamsChecker是一个特殊化的DictChecker*/
/*Regist 这里调用了function sort也有些特殊。*/
/*regist 中的_warp_function也相对比较诡异,其中也用到了ParamsChecker，以及DictChecker
理论上来讲ParamsChecker不应该出现在Warp_function中*/
/*
画出DictChecker的构造图：
BaseDictChecker----DictChecker
                ----ParamsChecker
理想的构造图应该是：
BaseDictChecker---*/
//DictChecker 和代码整体的耦合性比较强
//这里面get_element_checker的设计是不错的
//现在比较高耦合的地方主要是_warp_check_dict，由于子checker的问题，导致在warp的过程中无法知道应当如何warp
//如果出现了checker_dict被override，那么这个函数会崩掉。
//如果解析{}出现在transform中，那么transform的代码就会相对比较冗杂。
//ParamsChecker尽管是BaseDictChecker的特例，但是行为上比较复杂
//ParamsChecker非常特别
//{}应该被放在transform
//ParamsChecker是一个特殊的Checker，规定只能使用在function中
//DictChecker，只包含了固定的接口，DictChecker是一个实体
/*
//Enum 做测试，测试类型,编写list形式的快捷方式//
//编写simple way mapping

//太舒服了吧，这个工具，我爱上这个工具了
//{}
*/
/*下面要再添加一项功能,一个checker warper,在checker warper中
任何子对象都可以被翻译成一个checker,从而简化checker的写法
这里面有两点,第一点是不仅有transform中需要checker warper
在function的params setting中也需要checker warper
所以需要考虑checker warper应该如何设计. 两种checker warper表现出来的情况应该是统一的.(finish checker warper已不需要在regist中使用)
*/

//现在有paramschecker和dictchecker两种,如果传入的内容是paramschecker
/*现在重新看dict的机制应该有一定的问题存在，我想需要用OrderedDict
或者在做function call的时候需要传入func来做辅助
如果用OrderedDict那么输出显示会相对来讲不太美观，其他情况下并没有明显的坏处
在注册function的过程中需要调用sort_dict_key来让key有序，paramsChecker则需要通过sort_dict_key使得dict_checker被生成*/
/*ParamsChecker的设计比较迷，也许可以单独提出来，当作一个特别checker门类? */

/*如果放弃OrderedDict那么就需要在function call的时候来sort params
ParamsChecker作为一个特殊的门类，DictChecker需要提供有序的key generator
ParamsChecker也需要提供有序的key generator，根据当前传入的function来解析*/
/*这样的话，checker就不需要在regist阶段来warp*/
/*ParamsChecker需要在regist阶段解析一下*/
/*我似乎对设计有一些心急了*/
/*ParamsChecker门类比较特殊，需要在regist阶段解析，这也可以接受*/
/*简化访问不能去除，否则会影响到整体的使用*/
/*目前的一个小问题是，如何把简化访问写的尽可能通用，且简洁*/
/*DictChecker设计依然堪忧,好难啊*/
/*我在这里设计语法又绞尽脑汁*/
/*语法中不应该包含一个特殊的存在，但是sort_params又存在需求*/
/*sort_dict_checker需要被重新设计，如果存放数据的原始内容不再是checker_dict*/


/* 所以最终思路是什么呢? 首先ParamsChecker和DictChecker分别对待,并拥有相同的generate_params_dict(dict,params_sicrt)*/

/*下一步，抽象出warper(finish)*/

/*对Regist Error做错误定位（finish）*/

/*明日计划：
1）设计Enum
2）做大规模测试
3）编写setup
*/
/*现在只剩下Enum需要做设计
Enum可以有多种设计，在这里我给出一个相对广泛的设计类型
*/
/*思考一个基本问题，check_after 是否有用？，什么情况可能用到check_after呢？
首先最基本的类型无法用到check_after，然后考虑obj类型，如果选择限定check after而不是限定check before会造成不安全
我没有办法想到check after有什么特别的用处，我打算drop这个设定，统一将接口设计为check
*(这是个脏活，没有什么技巧)*/
/*检测StringChecker的pattern*/
/*清理transform中的check after*/
/*修改makefilter中的历史遗留代码*/
/*make filtering中需要暴露出checker_dict的内容，那么dictChecker需要提供接口来帮助剪切checker*/
/*未来计划：
1）在dictChecker中增添filter接口(完成)
2）添加Enum并做测试（undo）
3）编写setup（undo）
4）考虑更多的改进的地方
5）还有整体性测试
*/

/*filter接口存在一个问题
1）根据需要filter首先需要通过check_warper来生成一个DictChecker
2）然后DictChecker调用filter接口，返回一个新的DictChecker
然后新的DictChecker用来进行进一步检测
那么和generate_params_dict相同，如果DictChecker发生了剧烈变化，那么generate_filted_checker也将失效
*/
/*我似乎完成了generate_params_dict的操作*/

/*Enum 设计,Enum应该怎么做设计呢?

对于基本类型float int str bool none等,这些都必须是一个一摸一样的实例
对于一个对象类型,我希望用户的接口能够尽可能的简单,这又回到了之前的一个问题
对象应该是一个实例呢,还是应该是一个类名呢?
Enum类型,我希望尽可能简单*/
/*简单到什么程度呢?最简单的情况是 只要填写类名即可,再复杂一点呢,对于类要有一个基本的修饰.
*/
/*或者有特别的类对Enum做修饰*/
/*EnumChecker包含若干类
1)EnumChecker,包含基础类型的EnumChecker和ObjectChecker
2) InstaceEnumChecker 包含Object的的prefix string且必须未instance才能被通过
实际上我觉得Enum的设定容易让人产生混淆,如果既可以被实例化,又存在不可以被实例化,那么其实这种设定非常奇怪*/
/*实际上也很少有基本类型和特殊对象类型混淆在一起的情况,在这里我决定将Enum分开设计,分别是EnumChecker和
ObjectEnumChecker,对于ObjectEnumChecker,object必须完全和Object的名称对应,才能算作是通过*/
/*我决定支持三种EnumChecker，第一种EnumChecker，支持所有的类型，命名为EnumChecker
第二种仅支持基本类型，命名为BasicEnumChecker，第三种仅支持Object命名为ObjectEnumChecker*/
/*Enum是否支持Dict类型和List类型？考虑Dict和List是否需要被支持？
如果支持那么Enum就可以选择一种类型的Dict，如果是List那么就可以，接受一个List。
缺点是这种Enum相对复杂，考虑第二点是这种用法虽然扩展了pyson的能力，但是这种用法是否有必要性？
我的观点是，这种用法不应该被采纳，应该把这种用法加入到一个OneOfChecker中,OneOfChecker我打算把它作为后期工程来实现*/
/*所以确认Enum仅支持 int float bool str None RegistObject五种类型,并分为三种表示*/
/*三组不同的EnumChecker已添加，下一步考虑添加形式更加简单的Enums快捷方式*/
/*
下一步任务
1）编写文档
2）做进一步测试
3）写carpo的样例
*/
/*编写文档，的结构应该如何呢？
如何用一一种简单的方式，表达出PySON的优良特点和使用
到了checker，filter以及warper相对好写
但在PySON的基本概念的使用上相对难以把握
self的机制相对来讲容易一些，可以在阐述完整个概念以后加入到文档中
相对难以阐述的是如下若干个概念
我这里考虑先以JSON的表示切入。
然后加入注册机制，并表示对象
然后表示默认库
表示self引用
checker中有warper机制，然后还有filter*/
/*The self keyward的介绍稍微有一点复杂
1)首先需要说明self中list引用和正常的array的list引用有所不同
2)self引用的参数,传递给regist object或者是mudule object时都会进行值传递*/

/*这里面有一点小问题, 在params pass的时候,object是值传递
但是一般的reference是引用传递*/
/*这里在实际的使用过程中会带来混淆, 我打算把所有的值传递都更改为值传递*/
/*这部分还需要重新查看代码来更改*/
/*这部分已完成*/

/* 
1) self的引用语法和正常语法略有不同
2) self的引用参数采用了值传递,但Object传递了引用
3) self本身也可用于传递,非值传递
*/

/*Checker也需要做一定的规划，有若干部分内容
1）checker有全写形式
2）checker有简写形式
3）checker有pyson形式
4）checker有warper函数
5）checker有多种类
6）checker可以自己实现
7）checker分为pyson object checker和params checker
在这里，我把checker分为若干个部分阐述
1）checker的简写形式
2）checker的更简写形式
3）params checker
3）使用更复杂的形式请参阅checker文档
checker的高级用法：
1）使用pyson书写checker
2）checker warper
3）implement your own checker
在高级用法一栏,还有filter的使用*/

/*下一步
1)考察其他项目的各种用法的行文布局
2)编写setup.py并发布 python
3)编写pyson文档
*/

/*未来规划
1)完善文档
2)编写高自由度的example
3)整合进carpo平台
*/

/*编写test测试*/

/*unit test的设计相对来讲比较复杂
需要做一定的分门别类*/
/*
pyson中的功能有如下:
1)pyson的基本类型转义 int float string bool None
2)dict和list的嵌套使用
3)两种注释
4)Module object转义(库函数和buildin函数)
5)Regist object转义(class 转义和function 转义)
6)self关键词使用(self单独使用,self.name使用,嵌套使用)
checker中的功能如下:
1)checker的基本类型的各种情况
(int,float,string,bool,none,object,enum)
2)checker的list和dict的, 不同的参数和不同的调用方式
3)checker for params
4)添加self使用
高级用法如下:
1)filter机制
2)set warper机制
*/

/*需要对index item函数作出修复*/
/*修复包含以下两个方面
1）结构性修复
2）bug修复
(finish)*/

/*完成更多的test，但是test相对来讲比较复杂*/
/*需要包含正确检测和错误检测
1）正确的需要被检测正确
2）错误的需要被检测出错误
*/

/*比较难的是如何应对checker，正确的要正确，错误的要错误*/
/*同一个checker有不同的参数也要进行检查*/

/*这种检测非常复杂，我希望在实际使用中检测checker的正确性*/




